//Customer
LOAD CSV WITH HEADERS FROM "file:///olist_customers_dataset.csv" AS customers
WITH customers WHERE customers.customer_id IS NOT NULL AND customers.customer_unique_id IS NOT NULL
MERGE (c:Customer{customer_id: customers.customer_unique_id})
MERGE (o:Order{customer_id: customers.customer_id})
MERGE (c)-[:PLACED]->(o);

//Order
LOAD CSV WITH HEADERS FROM "file:///olist_orders_dataset.csv" AS orders
WITH orders WHERE orders.order_id IS NOT NULL
MERGE (o:Order{order_id: orders.order_id})
ON CREATE SET
	o.customer_id = orders.customer_id,
	o.purchase_timestamp = orders.order_purchase_timestamp,
	o.delivery_date = orders.order_estimated_delivery_date;

//Review DA CONTROLLARE
LOAD CSV WITH HEADERS FROM "file:///olist_order_reviews_dataset.csv" AS reviews
WITH reviews WHERE reviews.review_id IS NOT NULL
MERGE (r:Review{review_id: reviews.review_id})
ON CREATE SET
	r.score = reviews.review_score,
	r.comment_title = CASE trim(reviews.comment_title) WHEN "" THEN null ELSE reviews.comment_title END,
	r.comment = CASE trim(reviews.comment_message) WHEN "" THEN null ELSE reviews.comment_message END,
	r.creation_date = reviews.creation_date,
	r.answer_timestamp = reviews.answer_timestamp
MERGE (o:Order{order_id: reviews.order_id})
MERGE (o)-[:RECEIVED]->(r);

//Seller
LOAD CSV WITH HEADERS FROM "file:///olist_order_sellers_dataset.csv" AS sellers
WITH sellers WHERE sellers.seller_id IS NOT NULL
MERGE (s:Seller{seller_id: sellers.seller_id})
MERGE (c:City{name_state: sellers.seller_city + "-" + sellers.seller_state})
MERGE (s)-[:HAS_HEADQUARTERS_IN]->(c);

//Item
LOAD CSV WITH HEADERS FROM "file:///olist_order_items_dataset.csv" AS items
WITH items WHERE items.order_id IS NOT NULL AND items.order_item_id IS NOT NULL AND items.seller_id IS NOT NULL
MERGE (i:Item{item_id: items.order_id + "-" + items.order_item_id})
ON CREATE SET
	i.price = items.price
MERGE (o:Order{order_id: items.order_id})
MERGE (o)-[:COMPOSED_OF]->(i)
MERGE (s:Seller{seller_id: items.seller_id})
MERGE (i)-[:SOLD_BY]->(s)
MERGE (p:Product{product_id: items.product_id})
MERGE (i)-[:CORRESPONDS_TO]->(p);

//City and State
LOAD CSV WITH HEADERS FROM "file:///olist_geolocation_dataset.csv" AS locations
WITH locations WHERE locations.geolocation_city IS NOT NULL AND locations.geolocation_state IS NOT NULL
MERGE (c:City{name_state: locations.geolocation_city + "-" + locations.geolocation_state})
ON CREATE SET c.name = locations.geolocation_city
MERGE (s:State {code: locations.geolocation_state})
MERGE (c)-[:PART_OF]->(s);

//Product
LOAD CSV WITH HEADERS FROM "file:///olist_products_dataset.csv" AS products
WITH products WHERE products.product_id IS NOT NULL
MERGE (p:Product{product_id: products.product_id})
ON CREATE SET
		p.photos_qty = products.product_photos_qty,
		p.weight_g = products.product_weight_g,
		p.length_cm = products.product_length_cm,
		p.height_cm = products.product_height_cm,
		p.width_cm = products.product_width_cm
MERGE (c:Category{name: coalesce(products.product_category_name,"NA")})
MERGE (p)-[:BELONGS_TO]->(c);


MATCH (n) DETACH DELETE n
SHOW CONSTRAINTS
DROP CONSTRAINT



LOAD CSV WITH HEADERS FROM "file:///prova5.csv" AS items
WITH items WHERE items.order_id IS NOT NULL AND items.order_item_id IS NOT NULL AND items.seller_id IS NOT NULL
MERGE (i:Item{item_id: items.order_id + "-" + items.order_item_id})
ON CREATE SET
	i.price = items.price
MERGE (o:Order{order_id: items.order_id})
MERGE (o)-[:COMPOSED_OF]->(i)
MERGE (s:Seller{seller_id: items.seller_id})
MERGE (i)-[:SOLD_BY]->(s)
MERGE (p:Product{product_id: items.product_id})
MERGE (i)-[:CORRESPONDS_TO]->(p);

LOAD CSV WITH HEADERS FROM "file:///prova4.csv" AS sellers
WITH sellers WHERE sellers.seller_id IS NOT NULL
MERGE (s:Seller{seller_id: sellers.seller_id})
MERGE (c:City{name_state: sellers.seller_city + "-" + sellers.seller_state})
MERGE (s)-[:HAS_HEADQUARTERS_IN]->(c);

LOAD CSV WITH HEADERS FROM "file:///prova3.csv" AS locations
WITH locations WHERE locations.geolocation_city IS NOT NULL AND locations.geolocation_state IS NOT NULL
MERGE (c:City{name_state: locations.geolocation_city + "-" + locations.geolocation_state})
ON CREATE SET c.name = locations.geolocation_city
MERGE (s:State {code: locations.geolocation_state})
MERGE (c)-[:PART_OF]->(s);

LOAD CSV WITH HEADERS FROM "file:///prova2.csv" AS orders
WITH orders WHERE orders.order_id IS NOT NULL
MERGE (o:Order{order_id: orders.order_id})
ON CREATE SET
	o.customer_id = orders.customer_id,
	o.purchase_timestamp = orders.order_purchase_timestamp,
	o.delivery_date = orders.order_estimated_delivery_date;





